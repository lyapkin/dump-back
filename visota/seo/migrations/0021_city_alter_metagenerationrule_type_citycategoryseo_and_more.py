# Generated by Django 5.0.3 on 2025-03-04 13:26

import django.db.models.deletion
import django_ckeditor_5.fields
import seo.models
from django.db import migrations, models
from django.conf import settings


def create_new_types(apps, schema_editor):
    MetaGenerationRule = apps.get_model("seo", "MetaGenerationRule")
    MetaGenerationRuleTranslation = apps.get_model("seo", "MetaGenerationRuleTranslation")

    # Creating category city rule
    category_instruction = """Для генерации можно использовать переменные, название которых заключается в фигурные скобки {} (например, {name}).
                              Доступные переменные:
                              {name} - название категории
                              {city} - город"""
    category = MetaGenerationRule.objects.create(type="ctc", instruction=category_instruction)
    for lang, _ in settings.LANGUAGES:
        MetaGenerationRuleTranslation.objects.create(
            master_id=category.id, language_code=lang, title="{name}", description="{name}"
        )

    # Creating product city rule
    product_instruction = """Для генерации можно использовать переменные, название которых заключается в фигурные скобки {} (например, {name}).
                             Доступные переменные:
                             {name} - название категории
                             {price} - цена
                             {city} - город"""
    product = MetaGenerationRule.objects.create(type="pdc", instruction=product_instruction)
    for lang, _ in settings.LANGUAGES:
        MetaGenerationRuleTranslation.objects.create(
            master_id=product.id, language_code=lang, title="{name}", description="{name}"
        )

    # Creating tag city rule
    tag_instruction = """Для генерации можно использовать переменные, названия которых заключается в фигурные скобки {} (например, {name}).
                         Доступные переменные: 
                         {name} - название категории
                         {city} - город"""
    tag = MetaGenerationRule.objects.create(type="tgc", instruction=tag_instruction)
    for lang, _ in settings.LANGUAGES:
        MetaGenerationRuleTranslation.objects.create(
            master_id=tag.id, language_code=lang, title="{name}", description="{name}"
        )


class Migration(migrations.Migration):

    dependencies = [
        ("products", "0024_alter_subcategorytranslation_description"),
        ("seo", "0020_ghostredirect_remove_redirects_parent_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=128, unique=True, verbose_name="город")),
                ("slug", models.SlugField(blank=True, max_length=128, unique=True, verbose_name="url")),
                (
                    "lang",
                    models.CharField(
                        choices=[("ru", "Русский"), ("en", "Английский"), ("tr", "Турецкий"), ("zh", "Китайский")],
                        default="ru",
                        max_length=2,
                        verbose_name="языковая для города",
                    ),
                ),
            ],
            options={
                "verbose_name": "город",
                "verbose_name_plural": "города",
            },
        ),
        migrations.AlterField(
            model_name="metagenerationrule",
            name="type",
            field=models.CharField(
                choices=[
                    ("ctg", "Категория"),
                    ("prd", "Товар"),
                    ("tag", "Тег"),
                    ("ctc", "Категория город"),
                    ("pdc", "Товар город"),
                    ("tgc", "Тэг город"),
                ],
                max_length=3,
                unique=True,
                verbose_name="тип",
            ),
        ),
        migrations.RunPython(create_new_types, None),
        migrations.CreateModel(
            name="CityCategorySEO",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("header", models.CharField(max_length=255, verbose_name="h1")),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                (
                    "page_description",
                    django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name="описание категории"),
                ),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seo.city", verbose_name="город"
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="city_seo_set",
                        to="products.subcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "SEO по городу",
                "verbose_name_plural": "SEO по городам",
                "abstract": False,
            },
            bases=(models.Model, seo.models.SEOGenerationMixin),
        ),
        migrations.AddField(
            model_name="city",
            name="categories",
            field=models.ManyToManyField(through="seo.CityCategorySEO", to="products.subcategory"),
        ),
        migrations.CreateModel(
            name="CityProductSEO",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("header", models.CharField(max_length=255, verbose_name="h1")),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seo.city", verbose_name="город"
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="city_seo_set", to="products.product"
                    ),
                ),
            ],
            options={
                "verbose_name": "SEO по городу",
                "verbose_name_plural": "SEO по городам",
                "abstract": False,
            },
            bases=(models.Model, seo.models.SEOGenerationMixin),
        ),
        migrations.AddField(
            model_name="city",
            name="products",
            field=models.ManyToManyField(through="seo.CityProductSEO", to="products.product"),
        ),
        migrations.CreateModel(
            name="CityTagSEO",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("header", models.CharField(max_length=255, verbose_name="h1")),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                (
                    "page_description",
                    django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True, verbose_name="описание тега"),
                ),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seo.city", verbose_name="город"
                    ),
                ),
                (
                    "entity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="city_seo_set", to="products.tag"
                    ),
                ),
            ],
            options={
                "verbose_name": "SEO по городу",
                "verbose_name_plural": "SEO по городам",
                "abstract": False,
            },
            bases=(models.Model, seo.models.SEOGenerationMixin),
        ),
        migrations.AddField(
            model_name="city",
            name="tags",
            field=models.ManyToManyField(through="seo.CityTagSEO", to="products.tag"),
        ),
        migrations.AddConstraint(
            model_name="citycategoryseo",
            constraint=models.UniqueConstraint(fields=("city", "entity"), name="unique_city_category"),
        ),
        migrations.AddConstraint(
            model_name="cityproductseo",
            constraint=models.UniqueConstraint(fields=("city", "entity"), name="unique_city_product"),
        ),
        migrations.AddConstraint(
            model_name="citytagseo",
            constraint=models.UniqueConstraint(fields=("city", "entity"), name="unique_city_tag"),
        ),
    ]
